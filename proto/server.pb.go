// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "gofigure.Empty")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0x0b, 0xd6, 0x5a, 0x07, 0x41, 0x58, 0xfc, 0xc0, 0x78, 0x8b, 0x78, 0xf1, 0x90, 0x40,
	0x45, 0x3c, 0x78, 0x10, 0xa4, 0xb5, 0x08, 0x1e, 0xa4, 0xde, 0xbc, 0xa5, 0xe1, 0x6d, 0xb2, 0xb0,
	0xcd, 0xd6, 0xcd, 0xac, 0xa4, 0xbf, 0xc6, 0xbf, 0x2a, 0x9b, 0x8f, 0x26, 0xd6, 0x7a, 0x4a, 0xf2,
	0xcc, 0xfb, 0xcc, 0x64, 0x18, 0x3a, 0xca, 0x61, 0xbe, 0x60, 0x82, 0x95, 0xd1, 0xac, 0xc5, 0x30,
	0xd1, 0x0b, 0x99, 0x58, 0x03, 0x8f, 0x16, 0x52, 0xa1, 0xa2, 0x1e, 0xa1, 0x40, 0x5c, 0xbd, 0xfb,
	0x07, 0xb4, 0x3f, 0x59, 0xae, 0x78, 0x3d, 0xfa, 0xde, 0xa3, 0xe1, 0xb4, 0x4e, 0x8b, 0x47, 0x3a,
	0x1c, 0x4b, 0x83, 0x98, 0xb5, 0x59, 0x8b, 0xd3, 0xa0, 0xe9, 0x12, 0x3c, 0x4b, 0x85, 0x19, 0x3e,
	0x2d, 0x72, 0xf6, 0x2e, 0x5a, 0xbc, 0xc9, 0xce, 0x90, 0x5b, 0xc5, 0x7e, 0x4f, 0xdc, 0x51, 0xdf,
	0x65, 0xff, 0x73, 0x4f, 0xb6, 0x71, 0xad, 0x3d, 0xd0, 0x60, 0x0c, 0x05, 0x86, 0x38, 0xef, 0x74,
	0x2f, 0x49, 0xa3, 0x9e, 0xfd, 0x2d, 0xd4, 0xf2, 0x88, 0xfa, 0xef, 0x1c, 0xb1, 0x10, 0xbf, 0x9b,
	0xbf, 0x45, 0x9c, 0x76, 0x07, 0xba, 0xcc, 0xc6, 0x99, 0x12, 0xbd, 0xca, 0x0c, 0x2f, 0x59, 0xf9,
	0xb7, 0x97, 0x6d, 0xaa, 0xa5, 0xcd, 0x60, 0x6f, 0x77, 0xb1, 0x5d, 0x78, 0x52, 0x20, 0xee, 0x2e,
	0xec, 0xbe, 0x77, 0x2c, 0x5c, 0xe1, 0x5a, 0xbb, 0x71, 0x9a, 0x64, 0x71, 0xdc, 0xa9, 0xbb, 0x73,
	0x78, 0xdb, 0xc0, 0xef, 0x3d, 0x5d, 0x7f, 0x5c, 0x25, 0x92, 0x53, 0x3b, 0x0f, 0x62, 0xbd, 0x0c,
	0x23, 0x85, 0x22, 0xb5, 0x19, 0xdf, 0x87, 0x4d, 0x30, 0x2c, 0x2f, 0x3a, 0x1f, 0x94, 0x8f, 0xdb,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0xf0, 0xbb, 0xa9, 0x0a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GofigureClient is the client API for Gofigure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GofigureClient interface {
	Directory(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*DirectoryResult, error)
	File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResult, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResult, error)
	Stat(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*StatResult, error)
	LineInFile(ctx context.Context, in *LineInFileRequest, opts ...grpc.CallOption) (*LineInFileResult, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResult, error)
	Exit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type gofigureClient struct {
	cc *grpc.ClientConn
}

func NewGofigureClient(cc *grpc.ClientConn) GofigureClient {
	return &gofigureClient{cc}
}

func (c *gofigureClient) Directory(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*DirectoryResult, error) {
	out := new(DirectoryResult)
	err := c.cc.Invoke(ctx, "/gofigure.Gofigure/Directory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofigureClient) File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResult, error) {
	out := new(FileResult)
	err := c.cc.Invoke(ctx, "/gofigure.Gofigure/File", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofigureClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/gofigure.Gofigure/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofigureClient) Stat(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*StatResult, error) {
	out := new(StatResult)
	err := c.cc.Invoke(ctx, "/gofigure.Gofigure/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofigureClient) LineInFile(ctx context.Context, in *LineInFileRequest, opts ...grpc.CallOption) (*LineInFileResult, error) {
	out := new(LineInFileResult)
	err := c.cc.Invoke(ctx, "/gofigure.Gofigure/LineInFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofigureClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResult, error) {
	out := new(ExecResult)
	err := c.cc.Invoke(ctx, "/gofigure.Gofigure/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gofigureClient) Exit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gofigure.Gofigure/Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GofigureServer is the server API for Gofigure service.
type GofigureServer interface {
	Directory(context.Context, *FileRequest) (*DirectoryResult, error)
	File(context.Context, *FileRequest) (*FileResult, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResult, error)
	Stat(context.Context, *FilePath) (*StatResult, error)
	LineInFile(context.Context, *LineInFileRequest) (*LineInFileResult, error)
	Exec(context.Context, *ExecRequest) (*ExecResult, error)
	Exit(context.Context, *Empty) (*Empty, error)
}

func RegisterGofigureServer(s *grpc.Server, srv GofigureServer) {
	s.RegisterService(&_Gofigure_serviceDesc, srv)
}

func _Gofigure_Directory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofigureServer).Directory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.Gofigure/Directory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofigureServer).Directory(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofigure_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofigureServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.Gofigure/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofigureServer).File(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofigure_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofigureServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.Gofigure/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofigureServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofigure_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofigureServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.Gofigure/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofigureServer).Stat(ctx, req.(*FilePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofigure_LineInFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineInFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofigureServer).LineInFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.Gofigure/LineInFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofigureServer).LineInFile(ctx, req.(*LineInFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofigure_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofigureServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.Gofigure/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofigureServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofigure_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofigureServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.Gofigure/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofigureServer).Exit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gofigure_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gofigure.Gofigure",
	HandlerType: (*GofigureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Directory",
			Handler:    _Gofigure_Directory_Handler,
		},
		{
			MethodName: "File",
			Handler:    _Gofigure_File_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Gofigure_Delete_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _Gofigure_Stat_Handler,
		},
		{
			MethodName: "LineInFile",
			Handler:    _Gofigure_LineInFile_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Gofigure_Exec_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _Gofigure_Exit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
